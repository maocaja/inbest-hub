#!/usr/bin/env python3
"""
Script de testing b√°sico para Chat API
"""

import sys
import os
import asyncio
from typing import Dict, Any

# Agregar el directorio actual al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """Test de importaciones b√°sicas"""
    print("üß™ Testing importaciones...")
    
    try:
        from config import Config
        print("‚úÖ Config importado correctamente")
        
        from schemas.schemas import ChatRequest, ChatResponse, IntentType
        print("‚úÖ Schemas importados correctamente")
        
        from database.models import Conversation, Message, User
        print("‚úÖ Modelos de BD importados correctamente")
        
        from database.database import init_db, get_db
        print("‚úÖ Database config importado correctamente")
        
        from services.openai_service import OpenAIService
        print("‚úÖ OpenAI Service importado correctamente")
        
        from services.search_service import SearchService
        print("‚úÖ Search Service importado correctamente")
        
        from services.conversation_service import ConversationService
        print("‚úÖ Conversation Service importado correctamente")
        
        from services.response_generator import ResponseGenerator
        print("‚úÖ Response Generator importado correctamente")
        
        from services.chat_service import ChatService
        print("‚úÖ Chat Service importado correctamente")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en importaciones: {e}")
        return False

def test_config():
    """Test de configuraci√≥n"""
    print("\nüß™ Testing configuraci√≥n...")
    
    try:
        from config import Config
        
        # Verificar configuraci√≥n b√°sica
        assert Config.PORT == 8006, f"Puerto incorrecto: {Config.PORT}"
        assert Config.HOST == "0.0.0.0", f"Host incorrecto: {Config.HOST}"
        assert Config.EMBEDDING_SERVICE_URL == "http://localhost:8005", f"URL embedding incorrecta: {Config.EMBEDDING_SERVICE_URL}"
        assert Config.PROJECTS_SERVICE_URL == "http://localhost:8003", f"URL projects incorrecta: {Config.PROJECTS_SERVICE_URL}"
        
        print("‚úÖ Configuraci√≥n b√°sica correcta")
        return True
        
    except Exception as e:
        print(f"‚ùå Error en configuraci√≥n: {e}")
        return False

def test_schemas():
    """Test de esquemas Pydantic"""
    print("\nüß™ Testing esquemas...")
    
    try:
        from schemas.schemas import ChatRequest, ChatResponse, IntentType
        
        # Test ChatRequest
        request_data = {
            "message": "Busco apartamentos en Bogot√°",
            "user_id": "user_123"
        }
        request = ChatRequest(**request_data)
        assert request.message == "Busco apartamentos en Bogot√°"
        assert request.user_id == "user_123"
        print("‚úÖ ChatRequest funciona correctamente")
        
        # Test IntentType
        intent_types = [intent.value for intent in IntentType]
        expected_types = ["search_projects", "get_project_details", "greeting", "goodbye", "help", "unknown"]
        assert all(t in intent_types for t in expected_types), f"Tipos de intenci√≥n incorrectos: {intent_types}"
        print("‚úÖ IntentType funciona correctamente")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en esquemas: {e}")
        return False

def test_database_models():
    """Test de modelos de base de datos"""
    print("\nüß™ Testing modelos de BD...")
    
    try:
        from database.models import Conversation, Message, User
        from datetime import datetime
        
        # Test Conversation
        conv = Conversation(
            id="test_conv_123",
            user_id="user_123",
            created_at=datetime.utcnow(),
            status="active"
        )
        assert conv.id == "test_conv_123"
        assert conv.user_id == "user_123"
        assert conv.status == "active"
        print("‚úÖ Modelo Conversation funciona correctamente")
        
        # Test Message
        msg = Message(
            id="test_msg_456",
            conversation_id="test_conv_123",
            role="user",
            content="Test message",
            timestamp=datetime.utcnow()
        )
        assert msg.id == "test_msg_456"
        assert msg.role == "user"
        assert msg.content == "Test message"
        print("‚úÖ Modelo Message funciona correctamente")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en modelos de BD: {e}")
        return False

async def test_services():
    """Test de servicios b√°sicos"""
    print("\nüß™ Testing servicios...")
    
    try:
        from services.openai_service import OpenAIService
        from services.search_service import SearchService
        from services.conversation_service import ConversationService
        from services.response_generator import ResponseGenerator
        
        # Test OpenAI Service (sin API key)
        openai_service = OpenAIService()
        print("‚úÖ OpenAI Service inicializado")
        
        # Test Search Service
        search_service = SearchService()
        assert search_service.embedding_service_url == "http://localhost:8005"
        assert search_service.projects_service_url == "http://localhost:8003"
        print("‚úÖ Search Service inicializado correctamente")
        
        # Test Conversation Service
        conv_service = ConversationService()
        print("‚úÖ Conversation Service inicializado")
        
        # Test Response Generator
        response_gen = ResponseGenerator()
        print("‚úÖ Response Generator inicializado")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en servicios: {e}")
        return False

def test_file_structure():
    """Test de estructura de archivos"""
    print("\nüß™ Testing estructura de archivos...")
    
    required_files = [
        "main.py",
        "config.py",
        "requirements.txt",
        "env.example",
        "README.md",
        "schemas/schemas.py",
        "services/chat_service.py",
        "services/openai_service.py",
        "services/search_service.py",
        "services/conversation_service.py",
        "services/response_generator.py",
        "database/models.py",
        "database/database.py"
    ]
    
    missing_files = []
    for file_path in required_files:
        if not os.path.exists(file_path):
            missing_files.append(file_path)
    
    if missing_files:
        print(f"‚ùå Archivos faltantes: {missing_files}")
        return False
    else:
        print("‚úÖ Todos los archivos requeridos existen")
        return True

def test_dependencies():
    """Test de dependencias"""
    print("\nüß™ Testing dependencias...")
    
    required_packages = [
        "fastapi",
        "uvicorn", 
        "openai",
        "sqlalchemy",
        "httpx",
        "pydantic",
        "loguru"
    ]
    
    missing_packages = []
    for package in required_packages:
        try:
            __import__(package)
        except ImportError:
            missing_packages.append(package)
    
    if missing_packages:
        print(f"‚ùå Paquetes faltantes: {missing_packages}")
        return False
    else:
        print("‚úÖ Todas las dependencias est√°n instaladas")
        return True

async def main():
    """Funci√≥n principal de testing"""
    print("üöÄ Iniciando testing b√°sico del Chat API...\n")
    
    tests = [
        ("Estructura de archivos", test_file_structure),
        ("Dependencias", test_dependencies),
        ("Importaciones", test_imports),
        ("Configuraci√≥n", test_config),
        ("Esquemas", test_schemas),
        ("Modelos de BD", test_database_models),
        ("Servicios", test_services)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if asyncio.iscoroutinefunction(test_func):
                result = await test_func()
            else:
                result = test_func()
            
            if result:
                passed += 1
            else:
                print(f"‚ùå Test '{test_name}' fall√≥")
                
        except Exception as e:
            print(f"‚ùå Error en test '{test_name}': {e}")
    
    print(f"\nüìä Resultados del testing:")
    print(f"‚úÖ Tests pasados: {passed}/{total}")
    print(f"‚ùå Tests fallidos: {total - passed}")
    
    if passed == total:
        print("\nüéâ ¬°Todos los tests pasaron! El Chat API est√° listo para usar.")
        print("\nüìù Pr√≥ximos pasos:")
        print("1. Configurar OPENAI_API_KEY en .env")
        print("2. Asegurar que embedding-service est√© corriendo (puerto 8005)")
        print("3. Asegurar que projects-service est√© corriendo (puerto 8003)")
        print("4. Ejecutar: python main.py")
        print("5. Acceder a: http://localhost:8006/docs")
    else:
        print("\n‚ö†Ô∏è  Algunos tests fallaron. Revisar los errores antes de continuar.")
    
    return passed == total

if __name__ == "__main__":
    asyncio.run(main()) 