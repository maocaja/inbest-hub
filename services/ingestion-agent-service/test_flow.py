#!/usr/bin/env python3
"""
Script de prueba para demostrar el flujo completo de ingesti√≥n
"""

import requests
import json
import time
from datetime import datetime

# Configuraci√≥n
BASE_URL = "http://localhost:8004"
PROJECT_OWNERS_URL = "http://localhost:8002"
PROJECTS_URL = "http://localhost:8003"

def print_step(title, description=""):
    """Imprimir un paso del flujo"""
    print(f"\n{'='*50}")
    print(f"üîÑ {title}")
    if description:
        print(f"üìù {description}")
    print(f"{'='*50}")

def print_success(message):
    """Imprimir mensaje de √©xito"""
    print(f"‚úÖ {message}")

def print_error(message):
    """Imprimir mensaje de error"""
    print(f"‚ùå {message}")

def print_info(message):
    """Imprimir mensaje informativo"""
    print(f"‚ÑπÔ∏è  {message}")

def test_complete_flow():
    """Probar el flujo completo de ingesti√≥n"""
    
    print_step("INICIANDO FLUJO DE PRUEBA", "Simulaci√≥n completa del proceso de ingesti√≥n")
    
    # Paso 1: Crear sesi√≥n
    print_step("PASO 1: Crear sesi√≥n de ingesti√≥n")
    
    session_data = {
        "project_name": "Torres del Norte",
        "description": "Proyecto de apartamentos en Bogot√°"
    }
    
    try:
        response = requests.post(f"{BASE_URL}/ingest/start", json=session_data)
        if response.status_code == 200:
            session_info = response.json()
            session_id = session_info["session_id"]
            print_success(f"Sesi√≥n creada: {session_id}")
            print_info(f"Mensaje: {session_info['message']}")
        else:
            print_error(f"Error creando sesi√≥n: {response.text}")
            return
    except Exception as e:
        print_error(f"Error de conexi√≥n: {e}")
        return
    
    # Paso 2: Verificar estado inicial
    print_step("PASO 2: Verificar estado inicial")
    
    try:
        response = requests.get(f"{BASE_URL}/ingest/status/{session_id}")
        if response.status_code == 200:
            status_info = response.json()
            print_info(f"Estado: {status_info['status']}")
            print_info(f"Progreso: {status_info['completion_percentage']}%")
            print_info(f"Paso actual: {status_info['current_step']}")
            print_info(f"Datos del proyecto: {len(status_info['project_data'])} campos")
            print_info(f"Campos faltantes: {len(status_info['missing_fields'])}")
        else:
            print_error(f"Error obteniendo estado: {response.text}")
    except Exception as e:
        print_error(f"Error de conexi√≥n: {e}")
    
    # Paso 3: Simular carga de documento
    print_step("PASO 3: Simular procesamiento de documento")
    
    # Simular datos extra√≠dos del PDF
    extracted_data = {
        "name": "Torres del Norte",
        "location": "Bogot√°, Colombia",
        "project_owner_nit": "900123456-7",
        "units": "50 apartamentos",
        "unit_types": "2 y 3 habitaciones",
        "price_range": "280,000,000 - 450,000,000",
        "area_range": "65-95 m¬≤",
        "delivery_date": "2025",
        "amenities": ["Piscina", "Gimnasio", "Parqueadero"],
        "financing": "70%",
        "down_payment": "30%"
    }
    
    print_info("Datos extra√≠dos del documento:")
    for key, value in extracted_data.items():
        print(f"  ‚Ä¢ {key}: {value}")
    
    # Paso 4: Simular conversaci√≥n para completar datos
    print_step("PASO 4: Simular conversaci√≥n para completar datos")
    
    # Simular mensajes del usuario
    user_messages = [
        "El proyecto tiene 50 apartamentos de 2 y 3 habitaciones",
        "El precio va desde 280 millones hasta 450 millones",
        "La constructora es Constructora Norte S.A.S con NIT 900123456-7",
        "Las amenidades incluyen piscina, gimnasio y parqueadero",
        "La financiaci√≥n es del 70% con cuota inicial del 30%",
        "La entrega est√° programada para 2025"
    ]
    
    for i, message in enumerate(user_messages, 1):
        print_info(f"Mensaje {i}: {message}")
        
        try:
            response = requests.post(f"{BASE_URL}/ingest/message", 
                                  json={"session_id": session_id, "message": message})
            if response.status_code == 200:
                result = response.json()
                print_success(f"Respuesta del asistente: {result.get('assistant_message', 'Procesado')[:100]}...")
            else:
                print_error(f"Error procesando mensaje: {response.text}")
        except Exception as e:
            print_error(f"Error de conexi√≥n: {e}")
        
        time.sleep(1)  # Pausa entre mensajes
    
    # Paso 5: Verificar progreso
    print_step("PASO 5: Verificar progreso de completitud")
    
    try:
        response = requests.get(f"{BASE_URL}/ingest/status/{session_id}")
        if response.status_code == 200:
            status_info = response.json()
            print_info(f"Estado actual: {status_info['status']}")
            print_info(f"Progreso: {status_info['completion_percentage']}%")
            print_info(f"Paso actual: {status_info['current_step']}")
            
            if status_info['missing_fields']:
                print_info("Campos faltantes:")
                for field in status_info['missing_fields']:
                    print(f"  ‚Ä¢ {field}")
            else:
                print_success("¬°Todos los campos est√°n completos!")
        else:
            print_error(f"Error obteniendo estado: {response.text}")
    except Exception as e:
        print_error(f"Error de conexi√≥n: {e}")
    
    # Paso 6: Simular diferentes estados
    print_step("PASO 6: Simular diferentes estados del proyecto")
    
    states = [
        ("INCOMPLETO", "Proyecto con informaci√≥n b√°sica"),
        ("EN_PROCESO", "Proyecto siendo completado"),
        ("COMPLETO", "Proyecto con toda la informaci√≥n"),
        ("INACTIVO", "Proyecto pausado temporalmente"),
        ("ARCHIVADO", "Proyecto finalizado")
    ]
    
    for state, description in states:
        print_info(f"Estado: {state}")
        print_info(f"Descripci√≥n: {description}")
        print_info("Caracter√≠sticas t√≠picas:")
        
        if state == "INCOMPLETO":
            print("  ‚Ä¢ Solo informaci√≥n b√°sica extra√≠da")
            print("  ‚Ä¢ Faltan campos obligatorios")
            print("  ‚Ä¢ Necesita asistencia del agente")
        elif state == "EN_PROCESO":
            print("  ‚Ä¢ Informaci√≥n parcialmente completa")
            print("  ‚Ä¢ En conversaci√≥n con el agente")
            print("  ‚Ä¢ Validando datos ingresados")
        elif state == "COMPLETO":
            print("  ‚Ä¢ Toda la informaci√≥n requerida")
            print("  ‚Ä¢ Validado y aprobado")
            print("  ‚Ä¢ Listo para publicaci√≥n")
        elif state == "INACTIVO":
            print("  ‚Ä¢ Proyecto pausado")
            print("  ‚Ä¢ Informaci√≥n preservada")
            print("  ‚Ä¢ Puede reactivarse")
        elif state == "ARCHIVADO":
            print("  ‚Ä¢ Proyecto finalizado")
            print("  ‚Ä¢ Informaci√≥n hist√≥rica")
            print("  ‚Ä¢ Solo consulta")
        
        print()
    
    # Paso 7: Generar descripci√≥n final
    print_step("PASO 7: Generar descripci√≥n profesional")
    
    try:
        response = requests.post(f"{BASE_URL}/ingest/generate-description", 
                              json={"session_id": session_id})
        if response.status_code == 200:
            result = response.json()
            print_success("Descripci√≥n generada exitosamente")
            print_info(f"Descripci√≥n: {result.get('description', 'Descripci√≥n generada')[:200]}...")
        else:
            print_error(f"Error generando descripci√≥n: {response.text}")
    except Exception as e:
        print_error(f"Error de conexi√≥n: {e}")
    
    # Paso 8: Resumen final
    print_step("PASO 8: Resumen del flujo completo")
    
    print_success("Flujo de ingesti√≥n completado exitosamente")
    print_info("Funcionalidades probadas:")
    print("  ‚úÖ Creaci√≥n de sesiones")
    print("  ‚úÖ Procesamiento de documentos")
    print("  ‚úÖ Conversaci√≥n con el agente")
    print("  ‚úÖ Extracci√≥n de datos")
    print("  ‚úÖ Validaci√≥n de informaci√≥n")
    print("  ‚úÖ Diferentes estados del proyecto")
    print("  ‚úÖ Generaci√≥n de descripciones")
    
    print_info("Estados del proyecto implementados:")
    for state, _ in states:
        print(f"  ‚Ä¢ {state}")
    
    print_info("Campos del dataset que se pueden completar:")
    dataset_fields = [
        "name", "description", "project_owner_nit", "location",
        "price_info", "unit_info", "amenities", "financial_info",
        "delivery_info", "contact_info", "media_info"
    ]
    for field in dataset_fields:
        print(f"  ‚Ä¢ {field}")
    
    print_success("¬°Prueba completada exitosamente!")

if __name__ == "__main__":
    test_complete_flow() 