#!/usr/bin/env python3
"""
Ejemplo de uso del Real Estate Data Extractor Agent

Este script demuestra c√≥mo usar el agente para extraer informaci√≥n
de proyectos inmobiliarios desde documentos.
"""

import requests
import json
import os
from pathlib import Path

# Configuraci√≥n
BASE_URL = "http://localhost:8012"

def test_extract_from_document(file_path: str):
    """
    Ejemplo de extracci√≥n de datos desde un documento
    """
    print(f"üîç Extrayendo datos desde: {file_path}")
    
    try:
        with open(file_path, 'rb') as file:
            files = {'file': (os.path.basename(file_path), file, 'application/octet-stream')}
            
            response = requests.post(f"{BASE_URL}/extract", files=files)
            
            if response.status_code == 200:
                result = response.json()
                
                if result['success']:
                    print("‚úÖ Extracci√≥n exitosa!")
                    print(f"üìä Score de completitud: {result['validation_result']['completeness_score']}%")
                    
                    # Mostrar datos extra√≠dos
                    project_data = result['project_data']
                    print("\nüìã DATOS EXTRA√çDOS:")
                    print(f"   Nombre: {project_data.get('name', 'N/A')}")
                    print(f"   Constructora: {project_data.get('builder', 'N/A')}")
                    print(f"   Estado: {project_data.get('status', 'N/A')}")
                    
                    if project_data.get('location'):
                        loc = project_data['location']
                        print(f"   Ubicaci√≥n: {loc.get('city', 'N/A')}, {loc.get('neighborhood', 'N/A')}")
                    
                    if project_data.get('price_info'):
                        price = project_data['price_info']
                        print(f"   Precio: {price.get('price_min', 'N/A')} - {price.get('price_max', 'N/A')} {price.get('currency', '')}")
                    
                    # Mostrar validaci√≥n
                    validation = result['validation_result']
                    if validation['errors']:
                        print("\n‚ùå ERRORES:")
                        for error in validation['errors']:
                            print(f"   - {error}")
                    
                    if validation['warnings']:
                        print("\n‚ö†Ô∏è ADVERTENCIAS:")
                        for warning in validation['warnings']:
                            print(f"   - {warning}")
                    
                    if validation['suggestions']:
                        print("\nüí° SUGERENCIAS:")
                        for suggestion in validation['suggestions']:
                            print(f"   - {suggestion}")
                    
                else:
                    print("‚ùå Error en la extracci√≥n:")
                    print(result['message'])
            else:
                print(f"‚ùå Error HTTP: {response.status_code}")
                print(response.text)
                
    except FileNotFoundError:
        print(f"‚ùå Archivo no encontrado: {file_path}")
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")

def test_validate_project_data():
    """
    Ejemplo de validaci√≥n de datos del proyecto
    """
    print("\nüîç Validando datos del proyecto...")
    
    # Datos de ejemplo para validar
    project_data = {
        "name": "Residencial Los Pinos",
        "builder": "Constructora ABC",
        "status": "preventa",
        "delivery_date": "2024-12",
        "location": {
            "country": "Colombia",
            "city": "Medell√≠n",
            "neighborhood": "El Poblado"
        },
        "price_info": {
            "currency": "COP",
            "price_min": 150000000,
            "price_max": 300000000
        },
        "unit_info": {
            "unit_types": ["apartamento"],
            "area_m2_min": 60,
            "area_m2_max": 120
        }
    }
    
    try:
        response = requests.post(f"{BASE_URL}/validate", json=project_data)
        
        if response.status_code == 200:
            result = response.json()
            
            print(f"‚úÖ Validaci√≥n completada!")
            print(f"üìä Score de completitud: {result['completeness_score']}%")
            print(f"‚úÖ V√°lido: {result['is_valid']}")
            
            if result['errors']:
                print("\n‚ùå ERRORES:")
                for error in result['errors']:
                    print(f"   - {error}")
            
            if result['warnings']:
                print("\n‚ö†Ô∏è ADVERTENCIAS:")
                for warning in result['warnings']:
                    print(f"   - {warning}")
            
            if result['suggestions']:
                print("\nüí° SUGERENCIAS:")
                for suggestion in result['suggestions']:
                    print(f"   - {suggestion}")
        else:
            print(f"‚ùå Error HTTP: {response.status_code}")
            print(response.text)
            
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")

def test_complete_missing_data():
    """
    Ejemplo de completado de informaci√≥n faltante
    """
    print("\nüîß Completando informaci√≥n faltante...")
    
    # Datos incompletos de ejemplo
    incomplete_data = {
        "name": "Residencial Los Pinos",
        "builder": "Constructora ABC",
        "status": "preventa",
        "location": {
            "city": "Medell√≠n"
        }
        # Faltan muchos campos
    }
    
    try:
        response = requests.post(f"{BASE_URL}/complete", json=incomplete_data)
        
        if response.status_code == 200:
            completed_data = response.json()
            
            print("‚úÖ Informaci√≥n completada!")
            print("\nüìã DATOS COMPLETADOS:")
            print(f"   Nombre: {completed_data.get('name', 'N/A')}")
            print(f"   Constructora: {completed_data.get('builder', 'N/A')}")
            print(f"   Estado: {completed_data.get('status', 'N/A')}")
            
            if completed_data.get('location'):
                loc = completed_data['location']
                print(f"   Pa√≠s: {loc.get('country', 'N/A')}")
                print(f"   Ciudad: {loc.get('city', 'N/A')}")
                print(f"   Zona: {loc.get('zone', 'N/A')}")
            
            if completed_data.get('price_info'):
                price = completed_data['price_info']
                print(f"   Moneda: {price.get('currency', 'N/A')}")
                print(f"   Precio m√≠nimo: {price.get('price_min', 'N/A')}")
                print(f"   Precio m√°ximo: {price.get('price_max', 'N/A')}")
            
            if completed_data.get('unit_info'):
                unit = completed_data['unit_info']
                print(f"   Tipos de unidad: {unit.get('unit_types', 'N/A')}")
                print(f"   √Årea m√≠nima: {unit.get('area_m2_min', 'N/A')} m¬≤")
                print(f"   √Årea m√°xima: {unit.get('area_m2_max', 'N/A')} m¬≤")
        else:
            print(f"‚ùå Error HTTP: {response.status_code}")
            print(response.text)
            
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")

def test_get_schema():
    """
    Ejemplo de obtenci√≥n del esquema JSON
    """
    print("\nüìã Obteniendo esquema JSON...")
    
    try:
        response = requests.get(f"{BASE_URL}/schema")
        
        if response.status_code == 200:
            schema = response.json()
            
            print("‚úÖ Esquema obtenido!")
            print(f"üìä T√≠tulo: {schema.get('title', 'N/A')}")
            print(f"üìù Descripci√≥n: {schema.get('description', 'N/A')}")
            print(f"üî¢ Versi√≥n: {schema.get('version', 'N/A')}")
            
            # Mostrar propiedades principales
            properties = schema.get('properties', {})
            print(f"\nüìã Propiedades principales ({len(properties)}):")
            for prop_name in list(properties.keys())[:5]:  # Mostrar solo las primeras 5
                print(f"   - {prop_name}")
            
        else:
            print(f"‚ùå Error HTTP: {response.status_code}")
            print(response.text)
            
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")

def check_server_status():
    """
    Verifica el estado del servidor
    """
    print("üîç Verificando estado del servidor...")
    
    try:
        response = requests.get(f"{BASE_URL}/health")
        
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ Servidor funcionando: {result['status']}")
            return True
        else:
            print(f"‚ùå Servidor no disponible: {response.status_code}")
            return False
            
    except requests.exceptions.ConnectionError:
        print("‚ùå No se puede conectar al servidor. Aseg√∫rate de que est√© ejecut√°ndose.")
        return False
    except Exception as e:
        print(f"‚ùå Error: {str(e)}")
        return False

def main():
    """
    Funci√≥n principal que ejecuta todos los ejemplos
    """
    print("üè† REAL ESTATE DATA EXTRACTOR AGENT - EJEMPLOS")
    print("=" * 50)
    
    # Verificar estado del servidor
    if not check_server_status():
        print("\nüí° Para ejecutar este ejemplo:")
        print("1. Aseg√∫rate de que el agente est√© ejecut√°ndose:")
        print("   cd agents/real-estate-extractor")
        print("   python main.py")
        print("2. Configura tu API key de OpenAI en el archivo .env")
        return
    
    # Ejecutar ejemplos
    test_get_schema()
    test_validate_project_data()
    test_complete_missing_data()
    
    # Ejemplo con archivo (si existe)
    example_file = Path("examples/sample_project.pdf")
    if example_file.exists():
        test_extract_from_document(str(example_file))
    else:
        print(f"\nüìÑ Para probar la extracci√≥n de documentos:")
        print(f"   Coloca un archivo PDF/DOCX/Excel en: {example_file}")
        print(f"   O usa el endpoint /extract directamente")
    
    print("\n‚úÖ Ejemplos completados!")

if __name__ == "__main__":
    main() 